Para cuando se registre un pago de un apartamento:

1.Grabo la transacción.

2. Si no hay cuotas_atrasadas y tampoco saldos a favor  y el pago es igual a la cuota de administración  del mes, registro en pago_cuotas.

3. Si no hay cuotas_atrasadas y tampoco saldos a favor y el pago es inferior a la cuota de administración del mes registro en saldos_a_favor

4. Si no hay cuotas atrasadas y tampoco saldos a favor y el pago es superior a la cuota de administración del mes, registro en pago_cuotas y la diferencia la llevo a saldos a favor

5. Si hay saldos a favor, se suman todos los que esten activos mas el pago.
    4.1 Si la suma resulta superior  a la cuota de administración del mes, registro en pago cuotas, cierro los saldos a favor del apartamento  y la diferencia la llevo a saldos a favor.
    4.2 Si la suma resulta inferior a la cuota de administración del mes, cierro todos los saldos a favor y creo un nuevo saldo a favor con la suma calculada.

6. Si hay cuotas atrasadas calculo el monto total de los intereses teniendo en cuenta la tasas_intereses, teniendo en cuenta los abonos a interés activos.
    6.1 Si el monto total de los intereses es superior al pago, entonces grabo un nuevo abono a interes por el valor del pago.
    6.2 Si el monto total de los intereses es inferior al pago, creo un nuevo abono a interes por el valor del monto total de los intereses y el excedente lo aplico a las cuotas atrasadas. De tal forma que si el excedente es igual a la suma de los saldos de las cuotas atrasadas, entonces cierro las cuotas atrasadas, si el excedente es inferior a la suma de los saldos de las cuotas atrasadas, entonces se observa si la cuota atrasada mas antigua es igual al excedente, si es asi se cierra la cuota atrasada, si resulta menor se disminuye el saldo y se modifica la fecha de modificación del registro, si resulta mayor, se cierra la cuota y con el saldo se sigue de manera recursiva para la siguiente cuota activa mas antigua. Si el excedente es mayor a la suma de todas las cuotas atrasadas se cierran todas las cuotas atrasadas y se crea un nuevo saldo a favor con el excedente.

    Para el proceso de cierre mensual se procede de la siguiente manera:

    1. Se reviza que apartamentos no tienen información para el año y mes de cierre en pago_cuotas. Entonces para cada uno de estos se verifica que de no tener saldo a favor, se crea un nuevo registro en la tabla cuotas atrasadas por el valor de la cuota del mes. De tener saldo a favor, se crea un nuevo registro en la tabla cuotas atrasadas por el valor de la cuota del mes menos el saldo a favor y luego se cierra el saldo a favor.





// Importar dependencias necesarias
import { Database } from 'sqlite';
import { DateTime } from 'luxon';

// Interfaces para los modelos de datos
interface Apartamento {
  id: number;
  numero: string;
}

interface Transaccion {
  id: number;
  id_item: number;
  ano: number;
  mes: number;
  tipo: 'INGRESO' | 'GASTO';
  monto: number;
  fecha_transaccion: string;
  descripcion: string;
  comprobante: string;
  id_usuario: number;
  id_apartamento: number | null;
}

interface CuotaAdministracion {
  id: number;
  id_apartamento: number;
  valor: number;
  fecha_inicio: string;
  fecha_fin: string;
}

interface SaldoAFavor {
  id: number;
  id_apartamento: number;
  monto: number;
  fecha_registro: string;
  activo: boolean;
  id_transaccion: number;
}

interface CuotaAtrasada {
  id: number;
  id_apartamento: number;
  id_cuota: number;
  monto_original: number;
  saldo_pendiente: number;
  mes: number;
  ano: number;
  fecha_vencimiento: string;
  activo: boolean;
}

interface AbonoInteres {
  id: number;
  id_apartamento: number;
  id_transaccion: number;
  monto: number;
  fecha_registro: string;
  activo: boolean;
}

interface TasaInteres {
  id: number;
  ano: number;
  mes: number;
  tasa_mensual: number;
}

/**
 * Clase principal para el procesamiento de pagos
 */

export class ProcesadorPagos {
  private db: Database;

  constructor(db: Database) {
    this.db = db;
  }

  /**
   * Procesa un nuevo pago y aplica la lógica correspondiente
   */
   
  async procesarPago(
    idApartamento: number,
    monto: number,
    idItem: number,
    ano: number,
    mes: number,
    descripcion: string,
    comprobante: string,
    idUsuario: number
  ): Promise<{ success: boolean; message: string; transactionId?: number }> {
    // Iniciamos una transacción SQL para garantizar la integridad de los datos
    await this.db.exec('BEGIN TRANSACTION');

    try {
      // 1. Registrar la transacción
      const transaccionId = await this.registrarTransaccion({
        id_item: idItem,
        ano,
        mes,
        tipo: 'INGRESO',
        monto,
        fecha_transaccion: DateTime.now().toFormat('yyyy-MM-dd'),
        descripcion,
        comprobante,
        id_usuario: idUsuario,
        id_apartamento: idApartamento
      });

      // 2. Obtener la cuota de administración vigente
      const cuota = await this.obtenerCuotaVigente(idApartamento, ano, mes);
      if (!cuota) {
        await this.db.exec('ROLLBACK');
        return { success: false, message: 'No se encontró una cuota de administración vigente para este periodo' };
      }

      // 3. Verificar si existen cuotas atrasadas
      const cuotasAtrasadas = await this.obtenerCuotasAtrasadas(idApartamento);

      // 4. Verificar si existen saldos a favor
      const saldosAFavor = await this.obtenerSaldosAFavor(idApartamento);
      const totalSaldosAFavor = saldosAFavor.reduce((total, saldo) => total + saldo.monto, 0);

      // 5. Procesar el pago según los diferentes escenarios
      if (cuotasAtrasadas.length > 0) {
        // Escenario 6: Hay cuotas atrasadas
        await this.procesarPagoConCuotasAtrasadas(idApartamento, monto, cuotasAtrasadas, transaccionId, ano, mes);
      } else if (totalSaldosAFavor > 0) {
        // Escenario 5: Hay saldos a favor
        await this.procesarPagoConSaldosAFavor(idApartamento, monto, saldosAFavor, cuota, transaccionId, ano, mes);
      } else {
        // Escenarios 2, 3 y 4: No hay cuotas atrasadas ni saldos a favor
        if (monto === cuota.valor) {
          // Escenario 2: Pago exacto
          await this.registrarPagoCompleto(idApartamento, cuota.id, monto, transaccionId);
        } else if (monto < cuota.valor) {
          // Escenario 3: Pago inferior
          await this.registrarSaldoAFavor(idApartamento, monto, transaccionId);
        } else {
          // Escenario 4: Pago superior
          const excedente = monto - cuota.valor;
          await this.registrarPagoCompleto(idApartamento, cuota.id, cuota.valor, transaccionId);
          await this.registrarSaldoAFavor(idApartamento, excedente, transaccionId);
        }
      }

      // Confirmar la transacción
      await this.db.exec('COMMIT');
      return { 
        success: true, 
        message: 'Pago procesado correctamente', 
        transactionId: transaccionId 
      };
    } catch (error) {
      // Revertir la transacción en caso de error
      await this.db.exec('ROLLBACK');
      console.error('Error al procesar el pago:', error);
      return { 
        success: false, 
        message: `Error al procesar el pago: ${error instanceof Error ? error.message : String(error)}` 
      };
    }
  }

  /**
   * Registra una nueva transacción en la base de datos
   */
  private async registrarTransaccion(transaccion: Omit<Transaccion, 'id'>): Promise<number> {
    const result = await this.db.run(
      `INSERT INTO transacciones 
      (id_item, ano, mes, tipo, monto, fecha_transaccion, descripcion, comprobante, id_usuario, id_apartamento) 
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        transaccion.id_item, 
        transaccion.ano, 
        transaccion.mes, 
        transaccion.tipo, 
        transaccion.monto, 
        transaccion.fecha_transaccion, 
        transaccion.descripcion, 
        transaccion.comprobante, 
        transaccion.id_usuario, 
        transaccion.id_apartamento
      ]
    );
    return result.lastID || 0;
  }

  /**
   * Obtiene la cuota de administración vigente para un apartamento y periodo
   */
  private async obtenerCuotaVigente(idApartamento: number, ano: number, mes: number): Promise<CuotaAdministracion | null> {
    const fecha = DateTime.fromObject({ year: ano, month: mes, day: 1 }).toFormat('yyyy-MM-dd');
    const cuota = await this.db.get<CuotaAdministracion>(
      `SELECT * FROM cuotas_administracion 
      WHERE id_apartamento = ? AND fecha_inicio <= ? AND fecha_fin >= ?`,
      [idApartamento, fecha, fecha]
    );
    return cuota || null;
  }

  /**
   * Obtiene las cuotas atrasadas activas para un apartamento
   */
  private async obtenerCuotasAtrasadas(idApartamento: number): Promise<CuotaAtrasada[]> {
    return this.db.all<CuotaAtrasada[]>(
      `SELECT * FROM cuotas_atrasadas 
      WHERE id_apartamento = ? AND activo = 1 
      ORDER BY fecha_vencimiento ASC`,
      [idApartamento]
    );
  }

  /**
   * Obtiene los saldos a favor activos para un apartamento
   */
  private async obtenerSaldosAFavor(idApartamento: number): Promise<SaldoAFavor[]> {
    return this.db.all<SaldoAFavor[]>(
      `SELECT * FROM saldos_a_favor 
      WHERE id_apartamento = ? AND activo = 1`,
      [idApartamento]
    );
  }

  /**
   * Registra un pago completo de una cuota de administración
   */
  private async registrarPagoCompleto(idApartamento: number, idCuota: number, monto: number, idTransaccion: number): Promise<void> {
    await this.db.run(
      `INSERT INTO pagos_cuotas 
      (id_cuota, id_transaccion, monto_principal, monto_interes, fecha_pago, metodo_pago, pago_completo) 
      VALUES (?, ?, ?, 0, ?, 'Transferencia', 1)`,
      [idCuota, idTransaccion, monto, DateTime.now().toFormat('yyyy-MM-dd')]
    );
  }

  /**
   * Registra un pago parcial de una cuota de administración
   */
  private async registrarPagoParcial(idApartamento: number, idCuota: number, monto: number, idTransaccion: number): Promise<void> {
    await this.db.run(
      `INSERT INTO pagos_cuotas 
      (id_cuota, id_transaccion, monto_principal, monto_interes, fecha_pago, metodo_pago, pago_completo) 
      VALUES (?, ?, ?, 0, ?, 'Transferencia', 0)`,
      [idCuota, idTransaccion, monto, DateTime.now().toFormat('yyyy-MM-dd')]
    );
  }

  /**
   * Registra un saldo a favor para un apartamento
   */
  private async registrarSaldoAFavor(idApartamento: number, monto: number, idTransaccion: number): Promise<number> {
    const result = await this.db.run(
      `INSERT INTO saldos_a_favor 
      (id_apartamento, monto, fecha_registro, activo, id_transaccion) 
      VALUES (?, ?, ?, 1, ?)`,
      [idApartamento, monto, DateTime.now().toFormat('yyyy-MM-dd'), idTransaccion]
    );
    return result.lastID || 0;
  }

  /**
   * Cierra un saldo a favor (lo marca como inactivo)
   */
  private async cerrarSaldoAFavor(idSaldo: number): Promise<void> {
    await this.db.run(
      `UPDATE saldos_a_favor 
      SET activo = 0, fecha_modificacion = ? 
      WHERE id = ?`,
      [DateTime.now().toISO(), idSaldo]
    );
  }

  /**
   * Procesa un pago cuando hay saldos a favor existentes
   */
  private async procesarPagoConSaldosAFavor(
    idApartamento: number, 
    monto: number, 
    saldosAFavor: SaldoAFavor[], 
    cuota: CuotaAdministracion, 
    idTransaccion: number,
    ano: number,
    mes: number
  ): Promise<void> {
    // Sumar todos los saldos a favor más el pago actual
    const totalSaldosAFavor = saldosAFavor.reduce((total, saldo) => total + saldo.monto, 0);
    const totalDisponible = totalSaldosAFavor + monto;

    // Cerrar todos los saldos a favor existentes
    for (const saldo of saldosAFavor) {
      await this.cerrarSaldoAFavor(saldo.id);
    }

    if (totalDisponible >= cuota.valor) {
      // Escenario 5.1: La suma cubre la cuota
      await this.registrarPagoCompleto(idApartamento, cuota.id, cuota.valor, idTransaccion);
      
      // Si hay excedente, crear un nuevo saldo a favor
      const excedente = totalDisponible - cuota.valor;
      if (excedente > 0) {
        await this.registrarSaldoAFavor(idApartamento, excedente, idTransaccion);
      }
    } else {
      // Escenario 5.2: La suma no cubre la cuota
      // Crear un nuevo saldo a favor con la suma total
      await this.registrarSaldoAFavor(idApartamento, totalDisponible, idTransaccion);
    }
  }

  /**
   * Calcula intereses para cuotas atrasadas
   */
  private async calcularIntereses(cuotasAtrasadas: CuotaAtrasada[]): Promise<{ total: number, detallesPorCuota: Array<{ idCuota: number, interes: number }> }> {
    const detallesPorCuota: Array<{ idCuota: number, interes: number }> = [];
    let totalIntereses = 0;

    for (const cuota of cuotasAtrasadas) {
      // Obtener la tasa de interés para el periodo de la cuota
      const tasa = await this.db.get<TasaInteres>(
        `SELECT * FROM tasas_interes WHERE ano = ? AND mes = ?`,
        [cuota.ano, cuota.mes]
      );

      if (tasa) {
        const fechaVencimiento = DateTime.fromFormat(cuota.fecha_vencimiento, 'yyyy-MM-dd');
        const fechaActual = DateTime.now();
        const mesesAtraso = Math.floor(fechaActual.diff(fechaVencimiento, 'months').months);

        // Calcular interés compuesto
        let interesCuota = 0;
        if (mesesAtraso > 0) {
          interesCuota = cuota.saldo_pendiente * (Math.pow(1 + tasa.tasa_mensual, mesesAtraso) - 1);
        }

        totalIntereses += interesCuota;
        detallesPorCuota.push({ idCuota: cuota.id, interes: interesCuota });
      }
    }

    return { total: totalIntereses, detallesPorCuota };
  }

  /**
   * Registra un abono a intereses
   */
  private async registrarAbonoInteres(idApartamento: number, monto: number, idTransaccion: number): Promise<number> {
    const result = await this.db.run(
      `INSERT INTO abonos_interes 
      (id_apartamento, id_transaccion, monto, fecha_registro, activo) 
      VALUES (?, ?, ?, ?, 1)`,
      [idApartamento, idTransaccion, monto, DateTime.now().toFormat('yyyy-MM-dd')]
    );
    return result.lastID || 0;
  }

  /**
   * Actualiza el saldo pendiente de una cuota atrasada
   */
  private async actualizarSaldoCuotaAtrasada(idCuota: number, nuevoSaldo: number): Promise<void> {
    await this.db.run(
      `UPDATE cuotas_atrasadas 
      SET saldo_pendiente = ?, fecha_modificacion = ? 
      WHERE id = ?`,
      [nuevoSaldo, DateTime.now().toISO(), idCuota]
    );
  }

  /**
   * Cierra una cuota atrasada (la marca como inactiva)
   */
  private async cerrarCuotaAtrasada(idCuota: number): Promise<void> {
    await this.db.run(
      `UPDATE cuotas_atrasadas 
      SET activo = 0, saldo_pendiente = 0, fecha_modificacion = ? 
      WHERE id = ?`,
      [DateTime.now().toISO(), idCuota]
    );
  }

  /**
   * Procesa un pago cuando hay cuotas atrasadas
   */
  private async procesarPagoConCuotasAtrasadas(
    idApartamento: number, 
    monto: number, 
    cuotasAtrasadas: CuotaAtrasada[], 
    idTransaccion: number,
    ano: number,
    mes: number
  ): Promise<void> {
    // Calcular intereses
    const { total: totalIntereses } = await this.calcularIntereses(cuotasAtrasadas);
    
    // Obtener abonos a interés activos
    const abonosInteres = await this.db.all<AbonoInteres[]>(
      `SELECT * FROM abonos_interes WHERE id_apartamento = ? AND activo = 1`,
      [idApartamento]
    );
    
    const totalAbonosInteres = abonosInteres.reduce((total, abono) => total + abono.monto, 0);
    const interesesPendientes = Math.max(0, totalIntereses - totalAbonosInteres);

    if (monto <= interesesPendientes) {
      // Escenario 6.1: El pago es menor o igual que los intereses pendientes
      await this.registrarAbonoInteres(idApartamento, monto, idTransaccion);
    } else {
      // Escenario 6.2: El pago es mayor que los intereses pendientes
      
      // Registrar abono a intereses por el valor pendiente
      if (interesesPendientes > 0) {
        await this.registrarAbonoInteres(idApartamento, interesesPendientes, idTransaccion);
      }
      
      // Aplicar el excedente a las cuotas atrasadas
      let excedente = monto - interesesPendientes;
      const totalCuotasAtrasadas = cuotasAtrasadas.reduce((total, cuota) => total + cuota.saldo_pendiente, 0);
      
      if (excedente >= totalCuotasAtrasadas) {
        // Si el excedente cubre todas las cuotas atrasadas
        // Cerrar todas las cuotas atrasadas
        for (const cuota of cuotasAtrasadas) {
          await this.cerrarCuotaAtrasada(cuota.id);
        }
        
        // Crear un saldo a favor con el excedente restante
        const nuevoExcedente = excedente - totalCuotasAtrasadas;
        if (nuevoExcedente > 0) {
          await this.registrarSaldoAFavor(idApartamento, nuevoExcedente, idTransaccion);
        }
      } else {
        // Aplicar el excedente a las cuotas atrasadas, empezando por la más antigua
        await this.aplicarPagoACuotasAtrasadas(cuotasAtrasadas, excedente, idTransaccion, idApartamento);
      }
    }
  }

  /**
   * Aplica un pago a las cuotas atrasadas de forma recursiva
   */
  private async aplicarPagoACuotasAtrasadas(
    cuotasAtrasadas: CuotaAtrasada[], 
    montoDisponible: number, 
    idTransaccion: number,
    idApartamento: number
  ): Promise<void> {
    if (cuotasAtrasadas.length === 0 || montoDisponible <= 0) {
      // Si no hay más cuotas o no hay más dinero disponible, terminamos
      if (montoDisponible > 0) {
        await this.registrarSaldoAFavor(idApartamento, montoDisponible, idTransaccion);
      }
      return;
    }

    // Tomamos la cuota más antigua (la primera de la lista)
    const cuotaActual = cuotasAtrasadas[0];
    const cuotasRestantes = cuotasAtrasadas.slice(1);

    if (montoDisponible >= cuotaActual.saldo_pendiente) {
      // Si el monto disponible cubre completamente esta cuota
      await this.cerrarCuotaAtrasada(cuotaActual.id);
      await this.registrarPagoParcial(idApartamento, cuotaActual.id_cuota, cuotaActual.saldo_pendiente, idTransaccion);
      
      // Continuamos con las siguientes cuotas
      const nuevoMontoDisponible = montoDisponible - cuotaActual.saldo_pendiente;
      await this.aplicarPagoACuotasAtrasadas(cuotasRestantes, nuevoMontoDisponible, idTransaccion, idApartamento);
    } else {
      // Si el monto disponible no cubre completamente esta cuota
      const nuevoSaldo = cuotaActual.saldo_pendiente - montoDisponible;
      await this.actualizarSaldoCuotaAtrasada(cuotaActual.id, nuevoSaldo);
      await this.registrarPagoParcial(idApartamento, cuotaActual.id_cuota, montoDisponible, idTransaccion);
    }
  }
}

/**
 * Ejemplo de uso de la clase ProcesadorPagos
 */
export async function registrarNuevoPago(
  db: Database,
  idApartamento: number,
  monto: number,
  idItem: number,
  ano: number,
  mes: number,
  descripcion: string,
  comprobante: string,
  idUsuario: number
): Promise<{ success: boolean; message: string; transactionId?: number }> {
  const procesador = new ProcesadorPagos(db);
  return procesador.procesarPago(
    idApartamento,
    monto,
    idItem,
    ano,
    mes,
    descripcion,
    comprobante,
    idUsuario
  );
}